#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: X86_64 OpenWrt  WSL

on:
  repository_dispatch:
  ## Git Push 时触发编译(不要删除此行注释)
  # push:
  #   branches: 
  #     - main
  
  ## 定时触发编译(不要删除此行注释)
  #schedule:
  #  - cron: 0 8 * * 5
  
  ## 重新点亮 Star 时触发编译(不要删除此行注释)
  #watch:
  #  types: [started]
  
  
  workflow_dispatch:

env:
  REPO_URL: https://github.com/yegetables/openwrt
  REPO_BRANCH: 23.05.4.self 
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  # 删除无用文件以增加编译空间
  DELETE_USELESS_FILES: false
  # 删除早期的 workflow 任务
  DELETE_OLD_WORKFLOW: false
  # Cache 加速编译
  CACHE_ACCELERATE: true

jobs:
  build:
    defaults:
      run:
        shell: bash
    runs-on: self-hosted

    steps:

    - name: "下载编译脚本"
      uses: actions/checkout@main
      with:    
        fetch-depth: 0

    - name: "安装ubuntu工具链"
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
       sudo -E apt-get -qq update
       sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
       sudo -E apt-get -qq autoremove --purge
       sudo -E apt-get -qq clean
       sudo timedatectl set-timezone "$TZ"
        
    - name: "下载op源码"
      run: |
        pwd
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt_${{ github.run_id }}
              
    - name: "加载自定义软件源feeds 执行脚本1"
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt_${{ github.run_id }}/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt_${{ github.run_id }}
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: "更新软件源feeds"
      run: cd openwrt_${{ github.run_id }} && ./scripts/feeds update -a

    - name: "安装软件源feeds"
      run: cd openwrt_${{ github.run_id }} && ./scripts/feeds install -a

    - name: "加载自定义files config并执行脚本2"
      run: |
        [ -e files ] && mv files openwrt_${{ github.run_id }}/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt_${{ github.run_id }}/.config
        chmod +x $DIY_P2_SH
        cd openwrt_${{ github.run_id }}
        $GITHUB_WORKSPACE/$DIY_P2_SH


    - name: "设置config启用op内置缓存"
      run: |
        if [ "${{ env.CACHE_ACCELERATE }}" == true ]
        then
            echo -e "\nCONFIG_DEVEL=y\nCONFIG_CCACHE=y\n" >> openwrt_${{ github.run_id }}/.config
        fi

    - name: "预下载编译软件包"
      id: package
      run: |
        cd openwrt_${{ github.run_id }}
        make defconfig
        make download -j8
    
    - name: "清除未下载的软件包"
      run: |
        cd openwrt_${{ github.run_id }}
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: "正式编译固件"
      id: compile
      run: |
        cd openwrt_${{ github.run_id }}
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: "检查空间使用"
      if: (!cancelled())
      run: df -hT

    - name: "上传bin"
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt_${{ github.run_id }}/bin

    - name: "组织文件 Organize files"
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt_${{ github.run_id }}/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: "上传固件目录"
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: "生成release tag标签"
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: "上传固件到release"
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: "删除旧的actions"
      if: env.DELETE_OLD_WORKFLOW == 'true' && !cancelled()
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 3
        keep_minimum_runs: 2

    - name: "删除旧的release"
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
